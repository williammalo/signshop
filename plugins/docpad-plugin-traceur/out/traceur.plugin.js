// Generated by CoffeeScript 1.6.3
var Compiler, ErrorReporter, Options, SourceFile, TreeWriter, traceur,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

traceur = require('traceur');

Compiler = traceur.codegeneration.Compiler;

SourceFile = traceur.syntax.SourceFile;

TreeWriter = traceur.outputgeneration.TreeWriter;

ErrorReporter = traceur.util.ErrorReporter;

Options = traceur.options;

module.exports = function(BasePlugin) {
  var TraceurPlugin, _ref;
  return TraceurPlugin = (function(_super) {
    __extends(TraceurPlugin, _super);

    function TraceurPlugin() {
      _ref = TraceurPlugin.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    TraceurPlugin.prototype.name = 'traceur';

    TraceurPlugin.prototype.config = {
      featureOptions: {}
    };

    TraceurPlugin.prototype.render = function(opts) {
      var basePath, compiledTree, errReporter, featureOptions, file, filename, inExtension, key, literate, outExtension, srcFile, value, _ref1;
      inExtension = opts.inExtension, outExtension = opts.outExtension, file = opts.file;
      literate = false;
      if ((inExtension === 'traceur' || inExtension === 'tr') && (outExtension === 'js' || outExtension === null)) {
        filename = file.get('filename');
        srcFile = new SourceFile(filename, opts.content);
        basePath = file.get('fullDirPath');
        errReporter = new ErrorReporter();
        featureOptions = null;
        _ref1 = this.getConfig().featureOptions;
        for (key in _ref1) {
          if (!__hasProp.call(_ref1, key)) continue;
          value = _ref1[key];
          Options.parse[key] = value === true;
        }
        compiledTree = Compiler.compileFile(errReporter, srcFile, basePath);
        if (errReporter.hadError()) {
          opts.content = '';
        } else {
          opts.content = TreeWriter.write(compiledTree, null);
        }
      }
    };

    return TraceurPlugin;

  })(BasePlugin);
};
